havoc x;
if x > 1 then {
    x := x + 1;
    assert(x < -1)
} else {
    x := 5
};
assert(x > 4);
havoc x;
while x < 20 do {
    x := x + 4
};
if x = 21 then {
    havoc x
}
________
x: x!2
pc: [Not(20 > 40 + x!1), 21 == 40 + x!1]
________
x: x!3
pc: [Not(20 > x!1), 21 == x!1]
________
x: x!4
pc: [Not(20 > 4 + x!1), 21 == 4 + x!1]
________
x: x!5
pc: [Not(20 > 8 + x!1), 21 == 8 + x!1]
________
x: x!6
pc: [Not(20 > 12 + x!1), 21 == 12 + x!1]
________
x: x!7
pc: [Not(20 > 16 + x!1), 21 == 16 + x!1]
________
x: x!8
pc: [Not(20 > 20 + x!1), 21 == 20 + x!1]
________
x: x!9
pc: [Not(20 > 24 + x!1), 21 == 24 + x!1]
________
x: x!10
pc: [Not(20 > 28 + x!1), 21 == 28 + x!1]
________
x: x!11
pc: [Not(20 > 32 + x!1), 21 == 32 + x!1]
________
x: x!12
pc: [Not(20 > 36 + x!1), 21 == 36 + x!1]
________
x: 40 + x!1
pc: [Not(21 == 40 + x!1)]
________
x: x!1
pc: [Not(21 == x!1)]
________
x: 4 + x!1
pc: [Not(21 == 4 + x!1)]
________
x: 8 + x!1
pc: [Not(21 == 8 + x!1)]
________
x: 12 + x!1
pc: [Not(21 == 12 + x!1)]
________
x: 16 + x!1
pc: [Not(21 == 16 + x!1)]
________
x: 20 + x!1
pc: [Not(21 == 20 + x!1)]
________
x: 24 + x!1
pc: [Not(21 == 24 + x!1)]
________
x: 28 + x!1
pc: [Not(21 == 28 + x!1)]
________
x: 32 + x!1
pc: [Not(21 == 32 + x!1)]
________
x: 36 + x!1
pc: [Not(21 == 36 + x!1)]
________
num_states: 22